// <auto-generated />
using System;
using MedicalServices.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicalServices.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250305193009_AddColmnInPatient")]
    partial class AddColmnInPatient
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MedicalServices.Models.AvailableAppointments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Day")
                        .HasColumnType("date");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("AvailableAppointments");
                });

            modelBuilder.Entity("MedicalServices.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Age")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("ChangeCount")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Day")
                        .HasColumnType("date");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("ForHimSelf")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("ProblemDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time");

                    b.Property<string>("patientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("MedicalServices.Models.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<string>("ReceiverType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SendTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<string>("SenderType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("MedicalServices.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Focus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SpecializationId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Heart St",
                            Experience = "10 years",
                            Gender = 0,
                            SpecializationId = 1
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Pulse Ave",
                            Experience = "8 years",
                            Gender = 1,
                            SpecializationId = 1
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Artery Blvd",
                            Experience = "12 years",
                            Gender = 0,
                            SpecializationId = 1
                        },
                        new
                        {
                            Id = 4,
                            Address = "321 Skin Lane",
                            Experience = "7 years",
                            Gender = 1,
                            SpecializationId = 2
                        },
                        new
                        {
                            Id = 5,
                            Address = "654 Acne Dr",
                            Experience = "6 years",
                            Gender = 0,
                            SpecializationId = 2
                        },
                        new
                        {
                            Id = 6,
                            Address = "987 Derma Ct",
                            Experience = "9 years",
                            Gender = 1,
                            SpecializationId = 2
                        },
                        new
                        {
                            Id = 7,
                            Address = "123 Brain Ave",
                            Experience = "15 years",
                            Gender = 0,
                            SpecializationId = 3
                        },
                        new
                        {
                            Id = 8,
                            Address = "456 Neuron Blvd",
                            Experience = "11 years",
                            Gender = 1,
                            SpecializationId = 3
                        },
                        new
                        {
                            Id = 9,
                            Address = "789 Spine Dr",
                            Experience = "13 years",
                            Gender = 0,
                            SpecializationId = 3
                        },
                        new
                        {
                            Id = 10,
                            Address = "321 Bone St",
                            Experience = "14 years",
                            Gender = 0,
                            SpecializationId = 4
                        },
                        new
                        {
                            Id = 11,
                            Address = "654 Joint Ave",
                            Experience = "8 years",
                            Gender = 1,
                            SpecializationId = 4
                        },
                        new
                        {
                            Id = 12,
                            Address = "987 Fracture Rd",
                            Experience = "10 years",
                            Gender = 0,
                            SpecializationId = 4
                        },
                        new
                        {
                            Id = 13,
                            Address = "123 Kids Ln",
                            Experience = "5 years",
                            Gender = 1,
                            SpecializationId = 5
                        },
                        new
                        {
                            Id = 14,
                            Address = "456 Baby Blvd",
                            Experience = "6 years",
                            Gender = 0,
                            SpecializationId = 5
                        },
                        new
                        {
                            Id = 15,
                            Address = "789 Child Ct",
                            Experience = "8 years",
                            Gender = 1,
                            SpecializationId = 5
                        },
                        new
                        {
                            Id = 16,
                            Address = "321 Cancer St",
                            Experience = "12 years",
                            Gender = 0,
                            SpecializationId = 6
                        },
                        new
                        {
                            Id = 17,
                            Address = "654 Tumor Blvd",
                            Experience = "10 years",
                            Gender = 1,
                            SpecializationId = 6
                        },
                        new
                        {
                            Id = 18,
                            Address = "987 Chemo Rd",
                            Experience = "11 years",
                            Gender = 0,
                            SpecializationId = 6
                        },
                        new
                        {
                            Id = 19,
                            Address = "123 Mind St",
                            Experience = "9 years",
                            Gender = 1,
                            SpecializationId = 7
                        },
                        new
                        {
                            Id = 20,
                            Address = "456 Emotion Ave",
                            Experience = "8 years",
                            Gender = 0,
                            SpecializationId = 7
                        },
                        new
                        {
                            Id = 21,
                            Address = "789 Therapy Ct",
                            Experience = "7 years",
                            Gender = 1,
                            SpecializationId = 7
                        },
                        new
                        {
                            Id = 22,
                            Address = "321 Xray Ln",
                            Experience = "13 years",
                            Gender = 0,
                            SpecializationId = 8
                        },
                        new
                        {
                            Id = 23,
                            Address = "654 MRI Blvd",
                            Experience = "12 years",
                            Gender = 1,
                            SpecializationId = 8
                        },
                        new
                        {
                            Id = 24,
                            Address = "987 CT Scan Rd",
                            Experience = "14 years",
                            Gender = 0,
                            SpecializationId = 8
                        });
                });

            modelBuilder.Entity("MedicalServices.Models.DoctorSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<DateTime>("TimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorSchedules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateOnly(2024, 12, 16),
                            DoctorId = 1,
                            Name = "Morning Shift",
                            Price = 100f,
                            TimeEnd = new DateTime(2024, 12, 16, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2024, 12, 16, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateOnly(2024, 12, 16),
                            DoctorId = 1,
                            Name = "Evening Shift",
                            Price = 120f,
                            TimeEnd = new DateTime(2024, 12, 16, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2024, 12, 16, 16, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateOnly(2024, 12, 17),
                            DoctorId = 2,
                            Name = "Morning Shift",
                            Price = 110f,
                            TimeEnd = new DateTime(2024, 12, 17, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2024, 12, 17, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateOnly(2024, 12, 17),
                            DoctorId = 2,
                            Name = "Evening Shift",
                            Price = 130f,
                            TimeEnd = new DateTime(2024, 12, 17, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2024, 12, 17, 15, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateOnly(2024, 12, 18),
                            DoctorId = 3,
                            Name = "Morning Shift",
                            Price = 90f,
                            TimeEnd = new DateTime(2024, 12, 18, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2024, 12, 18, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateOnly(2024, 12, 18),
                            DoctorId = 3,
                            Name = "Evening Shift",
                            Price = 150f,
                            TimeEnd = new DateTime(2024, 12, 18, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2024, 12, 18, 17, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateOnly(2024, 12, 19),
                            DoctorId = 4,
                            Name = "Morning Shift",
                            Price = 95f,
                            TimeEnd = new DateTime(2024, 12, 19, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2024, 12, 19, 8, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateOnly(2024, 12, 19),
                            DoctorId = 4,
                            Name = "Evening Shift",
                            Price = 125f,
                            TimeEnd = new DateTime(2024, 12, 19, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2024, 12, 19, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateOnly(2024, 12, 20),
                            DoctorId = 5,
                            Name = "Morning Shift",
                            Price = 110f,
                            TimeEnd = new DateTime(2024, 12, 20, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2024, 12, 20, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateOnly(2024, 12, 20),
                            DoctorId = 5,
                            Name = "Evening Shift",
                            Price = 140f,
                            TimeEnd = new DateTime(2024, 12, 20, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2024, 12, 20, 16, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            Date = new DateOnly(2024, 12, 21),
                            DoctorId = 6,
                            Name = "Morning Shift",
                            Price = 115f,
                            TimeEnd = new DateTime(2024, 12, 21, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2024, 12, 21, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            Date = new DateOnly(2024, 12, 21),
                            DoctorId = 6,
                            Name = "Evening Shift",
                            Price = 125f,
                            TimeEnd = new DateTime(2024, 12, 21, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2024, 12, 21, 14, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            Date = new DateOnly(2024, 12, 22),
                            DoctorId = 7,
                            Name = "Morning Shift",
                            Price = 105f,
                            TimeEnd = new DateTime(2024, 12, 22, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2024, 12, 22, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            Date = new DateOnly(2024, 12, 22),
                            DoctorId = 7,
                            Name = "Evening Shift",
                            Price = 135f,
                            TimeEnd = new DateTime(2024, 12, 22, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2024, 12, 22, 16, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15,
                            Date = new DateOnly(2024, 12, 23),
                            DoctorId = 8,
                            Name = "Morning Shift",
                            Price = 100f,
                            TimeEnd = new DateTime(2024, 12, 23, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2024, 12, 23, 9, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 16,
                            Date = new DateOnly(2024, 12, 23),
                            DoctorId = 8,
                            Name = "Evening Shift",
                            Price = 120f,
                            TimeEnd = new DateTime(2024, 12, 23, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2024, 12, 23, 15, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 17,
                            Date = new DateOnly(2024, 12, 24),
                            DoctorId = 9,
                            Name = "Morning Shift",
                            Price = 125f,
                            TimeEnd = new DateTime(2024, 12, 24, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2024, 12, 24, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 18,
                            Date = new DateOnly(2024, 12, 24),
                            DoctorId = 9,
                            Name = "Evening Shift",
                            Price = 135f,
                            TimeEnd = new DateTime(2024, 12, 24, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2024, 12, 24, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 19,
                            Date = new DateOnly(2024, 12, 25),
                            DoctorId = 10,
                            Name = "Morning Shift",
                            Price = 110f,
                            TimeEnd = new DateTime(2024, 12, 25, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2024, 12, 25, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 20,
                            Date = new DateOnly(2024, 12, 25),
                            DoctorId = 10,
                            Name = "Evening Shift",
                            Price = 130f,
                            TimeEnd = new DateTime(2024, 12, 25, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2024, 12, 25, 16, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 21,
                            Date = new DateOnly(2024, 12, 26),
                            DoctorId = 11,
                            Name = "Morning Shift",
                            Price = 115f,
                            TimeEnd = new DateTime(2024, 12, 26, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2024, 12, 26, 8, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 22,
                            Date = new DateOnly(2024, 12, 26),
                            DoctorId = 11,
                            Name = "Evening Shift",
                            Price = 125f,
                            TimeEnd = new DateTime(2024, 12, 26, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2024, 12, 26, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 23,
                            Date = new DateOnly(2024, 12, 27),
                            DoctorId = 12,
                            Name = "Morning Shift",
                            Price = 120f,
                            TimeEnd = new DateTime(2024, 12, 27, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2024, 12, 27, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 24,
                            Date = new DateOnly(2024, 12, 27),
                            DoctorId = 12,
                            Name = "Evening Shift",
                            Price = 140f,
                            TimeEnd = new DateTime(2024, 12, 27, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2024, 12, 27, 16, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 25,
                            Date = new DateOnly(2024, 12, 28),
                            DoctorId = 13,
                            Name = "Morning Shift",
                            Price = 110f,
                            TimeEnd = new DateTime(2024, 12, 28, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2024, 12, 28, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 26,
                            Date = new DateOnly(2024, 12, 28),
                            DoctorId = 13,
                            Name = "Evening Shift",
                            Price = 130f,
                            TimeEnd = new DateTime(2024, 12, 28, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2024, 12, 28, 16, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 27,
                            Date = new DateOnly(2024, 12, 28),
                            DoctorId = 14,
                            Name = "Morning Shift",
                            Price = 110f,
                            TimeEnd = new DateTime(2024, 12, 28, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2024, 12, 28, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 28,
                            Date = new DateOnly(2024, 12, 28),
                            DoctorId = 14,
                            Name = "Evening Shift",
                            Price = 130f,
                            TimeEnd = new DateTime(2024, 12, 28, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2024, 12, 28, 16, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 29,
                            Date = new DateOnly(2024, 12, 29),
                            DoctorId = 15,
                            Name = "Morning Shift",
                            Price = 115f,
                            TimeEnd = new DateTime(2024, 12, 29, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2024, 12, 29, 8, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 30,
                            Date = new DateOnly(2024, 12, 29),
                            DoctorId = 15,
                            Name = "Evening Shift",
                            Price = 135f,
                            TimeEnd = new DateTime(2024, 12, 29, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2024, 12, 29, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 31,
                            Date = new DateOnly(2024, 12, 30),
                            DoctorId = 16,
                            Name = "Morning Shift",
                            Price = 120f,
                            TimeEnd = new DateTime(2024, 12, 30, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2024, 12, 30, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 32,
                            Date = new DateOnly(2024, 12, 30),
                            DoctorId = 16,
                            Name = "Evening Shift",
                            Price = 140f,
                            TimeEnd = new DateTime(2024, 12, 30, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2024, 12, 30, 16, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 33,
                            Date = new DateOnly(2024, 12, 31),
                            DoctorId = 17,
                            Name = "Morning Shift",
                            Price = 110f,
                            TimeEnd = new DateTime(2024, 12, 31, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2024, 12, 31, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 34,
                            Date = new DateOnly(2024, 12, 31),
                            DoctorId = 17,
                            Name = "Evening Shift",
                            Price = 130f,
                            TimeEnd = new DateTime(2024, 12, 31, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2024, 12, 31, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 35,
                            Date = new DateOnly(2025, 1, 1),
                            DoctorId = 18,
                            Name = "Morning Shift",
                            Price = 125f,
                            TimeEnd = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2025, 1, 1, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 36,
                            Date = new DateOnly(2025, 1, 1),
                            DoctorId = 18,
                            Name = "Evening Shift",
                            Price = 145f,
                            TimeEnd = new DateTime(2025, 1, 1, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2025, 1, 1, 16, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 37,
                            Date = new DateOnly(2025, 1, 2),
                            DoctorId = 19,
                            Name = "Morning Shift",
                            Price = 115f,
                            TimeEnd = new DateTime(2025, 1, 2, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2025, 1, 2, 9, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 38,
                            Date = new DateOnly(2025, 1, 2),
                            DoctorId = 19,
                            Name = "Evening Shift",
                            Price = 135f,
                            TimeEnd = new DateTime(2025, 1, 2, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2025, 1, 2, 16, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 39,
                            Date = new DateOnly(2025, 1, 3),
                            DoctorId = 20,
                            Name = "Morning Shift",
                            Price = 120f,
                            TimeEnd = new DateTime(2025, 1, 3, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2025, 1, 3, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 40,
                            Date = new DateOnly(2025, 1, 3),
                            DoctorId = 20,
                            Name = "Evening Shift",
                            Price = 140f,
                            TimeEnd = new DateTime(2025, 1, 3, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2025, 1, 3, 14, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 41,
                            Date = new DateOnly(2025, 1, 4),
                            DoctorId = 21,
                            Name = "Morning Shift",
                            Price = 125f,
                            TimeEnd = new DateTime(2025, 1, 4, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2025, 1, 4, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 42,
                            Date = new DateOnly(2025, 1, 4),
                            DoctorId = 21,
                            Name = "Evening Shift",
                            Price = 145f,
                            TimeEnd = new DateTime(2025, 1, 4, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2025, 1, 4, 16, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 43,
                            Date = new DateOnly(2025, 1, 5),
                            DoctorId = 22,
                            Name = "Morning Shift",
                            Price = 110f,
                            TimeEnd = new DateTime(2025, 1, 5, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2025, 1, 5, 8, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 44,
                            Date = new DateOnly(2025, 1, 5),
                            DoctorId = 22,
                            Name = "Evening Shift",
                            Price = 130f,
                            TimeEnd = new DateTime(2025, 1, 5, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2025, 1, 5, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 45,
                            Date = new DateOnly(2025, 1, 6),
                            DoctorId = 23,
                            Name = "Morning Shift",
                            Price = 115f,
                            TimeEnd = new DateTime(2025, 1, 6, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2025, 1, 6, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 46,
                            Date = new DateOnly(2025, 1, 6),
                            DoctorId = 23,
                            Name = "Evening Shift",
                            Price = 135f,
                            TimeEnd = new DateTime(2025, 1, 6, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2025, 1, 6, 16, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 47,
                            Date = new DateOnly(2024, 12, 30),
                            DoctorId = 24,
                            Name = "Morning Shift",
                            Price = 120f,
                            TimeEnd = new DateTime(2024, 12, 30, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2024, 12, 30, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 48,
                            Date = new DateOnly(2024, 12, 30),
                            DoctorId = 24,
                            Name = "Evening Shift",
                            Price = 140f,
                            TimeEnd = new DateTime(2024, 12, 30, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2024, 12, 30, 16, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MedicalServices.Models.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("MedicalServices.Models.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "17695fdc-7792-4949-b006-982ccef41dcb",
                            Email = "john.smith@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. John Smith",
                            Password = "hashed_password_123",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.john.smith"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "35d0bd86-b269-4ed4-81a3-03fc478facde",
                            Email = "sarah.johnson@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Sarah Johnson",
                            Password = "hashed_password_456",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.sarah.johnson"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "31c26307-0c7c-4e90-9acd-ef7764bb1b9e",
                            Email = "ahmed.ali@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Ahmed Ali",
                            Password = "hashed_password_789",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.ahmed.ali"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1664ec7b-699c-4865-be88-00b657710841",
                            Email = "emily.brown@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Emily Brown",
                            Password = "hashed_password_101",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.emily.brown"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e4eab79b-855b-4d92-aec8-f4986910cbb8",
                            Email = "william.davis@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. William Davis",
                            Password = "hashed_password_102",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.william.davis"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6397f9e8-a72d-4b59-84c0-44b4cca7824f",
                            Email = "fatima.hassan@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Fatima Hassan",
                            Password = "hashed_password_103",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.fatima.hassan"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "02c3332f-ae9d-4b29-82e9-e7085c9c7f01",
                            Email = "jacob.wilson@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Jacob Wilson",
                            Password = "hashed_password_104",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.jacob.wilson"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "176fb3db-73c9-47c7-98ab-0018bbdb7f04",
                            Email = "sophia.martinez@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Sophia Martinez",
                            Password = "hashed_password_105",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.sophia.martinez"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "42690b7a-af65-4512-84ed-1877cb47585a",
                            Email = "ethan.thompson@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Ethan Thompson",
                            Password = "hashed_password_106",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.ethan.thompson"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e7a8345c-c2cc-43e8-9be3-7eff537bc848",
                            Email = "ava.garcia@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Ava Garcia",
                            Password = "hashed_password_107",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.ava.garcia"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a506a546-ddf3-4342-9a72-f00f8df704e2",
                            Email = "michael.lee@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Michael Lee",
                            Password = "hashed_password_108",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.michael.lee"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b97ef50b-160d-43a7-a3e3-ceced1194659",
                            Email = "olivia.rodriguez@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Olivia Rodriguez",
                            Password = "hashed_password_109",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.olivia.rodriguez"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e73079f9-85cd-47ab-a6f6-75e500c2e063",
                            Email = "benjamin.white@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Benjamin White",
                            Password = "hashed_password_110",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.benjamin.white"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fa3b335f-7b6d-4ee7-b5d8-0753fe645477",
                            Email = "isabella.hall@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Isabella Hall",
                            Password = "hashed_password_111",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.isabella.hall"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "903892a2-301e-4b63-9f2a-83f5ff339982",
                            Email = "daniel.young@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Daniel Young",
                            Password = "hashed_password_112",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.daniel.young"
                        },
                        new
                        {
                            Id = 16,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1e78c76b-6527-40cb-9f22-b7dfb5d45f76",
                            Email = "mia.king@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Mia King",
                            Password = "hashed_password_113",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.mia.king"
                        },
                        new
                        {
                            Id = 17,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "693e3aab-db5e-4c78-871b-9a0e2d7e4d5d",
                            Email = "james.wright@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. James Wright",
                            Password = "hashed_password_114",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.james.wright"
                        },
                        new
                        {
                            Id = 18,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "61332d72-db5d-4a2e-bcc6-069cececcbce",
                            Email = "amelia.scott@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Amelia Scott",
                            Password = "hashed_password_115",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.amelia.scott"
                        },
                        new
                        {
                            Id = 19,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "694fbcce-05bc-468f-b6dc-f732f3344e72",
                            Email = "lucas.green@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Lucas Green",
                            Password = "hashed_password_116",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.lucas.green"
                        },
                        new
                        {
                            Id = 20,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5d7858de-7da2-49b2-bc7f-d6d1266ea532",
                            Email = "charlotte.adams@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Charlotte Adams",
                            Password = "hashed_password_117",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.charlotte.adams"
                        },
                        new
                        {
                            Id = 21,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e35a3a02-24fe-4a49-b586-29efce3eacde",
                            Email = "henry.baker@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Henry Baker",
                            Password = "hashed_password_118",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.henry.baker"
                        },
                        new
                        {
                            Id = 22,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2168896f-b7c1-4b73-960b-87417b5bc9d7",
                            Email = "grace.nelson@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Grace Nelson",
                            Password = "hashed_password_119",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.grace.nelson"
                        },
                        new
                        {
                            Id = 23,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7afb984c-8ba8-4f77-b0f6-ed0c8d23d98a",
                            Email = "elijah.carter@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Elijah Carter",
                            Password = "hashed_password_120",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.elijah.carter"
                        },
                        new
                        {
                            Id = 24,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "486ee8fa-ffaa-4cc8-b671-a123005653f8",
                            Email = "lily.mitchell@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Lily Mitchell",
                            Password = "hashed_password_121",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.lily.mitchell"
                        });
                });

            modelBuilder.Entity("MedicalServices.Models.MedicalRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Treatment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("MedicalServices.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<string>("ReceiverType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<string>("SenderType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("MedicalServices.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("age")
                        .HasColumnType("int");

                    b.Property<string>("patientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("MedicalServices.Models.PatientFavoriteDoctors", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("PatientId", "DoctorId");

                    b.HasIndex("DoctorId");

                    b.ToTable("PatientFavoriteDoctors");
                });

            modelBuilder.Entity("MedicalServices.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("MedicalServices.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("MedicalServices.Models.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cardiology"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Dermatology"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Neurology"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Orthopedics"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Pediatrics"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Oncology"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Psychiatry"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Radiology"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MedicalServices.Models.AvailableAppointments", b =>
                {
                    b.HasOne("MedicalServices.Models.Doctor", "Doctor")
                        .WithMany("AvailableAppointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("MedicalServices.Models.Booking", b =>
                {
                    b.HasOne("MedicalServices.Models.AvailableAppointments", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalServices.Models.Doctor", "Doctor")
                        .WithMany("Bookings")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicalServices.Models.Patient", "Patient")
                        .WithMany("Bookings")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalServices.Models.Doctor", b =>
                {
                    b.HasOne("MedicalServices.Models.Identity.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("MedicalServices.Models.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalServices.Models.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalServices.Models.DoctorSchedule", b =>
                {
                    b.HasOne("MedicalServices.Models.Doctor", null)
                        .WithMany("Schedules")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicalServices.Models.MedicalRecord", b =>
                {
                    b.HasOne("MedicalServices.Models.Booking", "Booking")
                        .WithOne("MedicalRecord")
                        .HasForeignKey("MedicalServices.Models.MedicalRecord", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("MedicalServices.Models.Notification", b =>
                {
                    b.HasOne("MedicalServices.Models.Identity.User", null)
                        .WithMany("Notifications")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MedicalServices.Models.Patient", b =>
                {
                    b.HasOne("MedicalServices.Models.Identity.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("MedicalServices.Models.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalServices.Models.PatientFavoriteDoctors", b =>
                {
                    b.HasOne("MedicalServices.Models.Doctor", "Doctor")
                        .WithMany("PatientFavoriteDoctors")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalServices.Models.Patient", "patient")
                        .WithMany("PatientFavoriteDoctors")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("patient");
                });

            modelBuilder.Entity("MedicalServices.Models.Payment", b =>
                {
                    b.HasOne("MedicalServices.Models.Booking", "Booking")
                        .WithOne("Payment")
                        .HasForeignKey("MedicalServices.Models.Payment", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("MedicalServices.Models.Review", b =>
                {
                    b.HasOne("MedicalServices.Models.Doctor", "Doctor")
                        .WithMany("Reviews")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalServices.Models.Patient", "Patient")
                        .WithMany("Reviews")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("MedicalServices.Models.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("MedicalServices.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("MedicalServices.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("MedicalServices.Models.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalServices.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("MedicalServices.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicalServices.Models.Booking", b =>
                {
                    b.Navigation("MedicalRecord")
                        .IsRequired();

                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("MedicalServices.Models.Doctor", b =>
                {
                    b.Navigation("AvailableAppointments");

                    b.Navigation("Bookings");

                    b.Navigation("PatientFavoriteDoctors");

                    b.Navigation("Reviews");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("MedicalServices.Models.Identity.User", b =>
                {
                    b.Navigation("Doctor")
                        .IsRequired();

                    b.Navigation("Notifications");

                    b.Navigation("Patient")
                        .IsRequired();
                });

            modelBuilder.Entity("MedicalServices.Models.Patient", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("PatientFavoriteDoctors");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("MedicalServices.Models.Specialization", b =>
                {
                    b.Navigation("Doctors");
                });
#pragma warning restore 612, 618
        }
    }
}
