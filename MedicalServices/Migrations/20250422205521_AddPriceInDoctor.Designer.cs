// <auto-generated />
using System;
using MedicalServices.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicalServices.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250422205521_AddPriceInDoctor")]
    partial class AddPriceInDoctor
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MedicalServices.Models.AvailableAppointments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Day")
                        .HasColumnType("date");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<TimeOnly>("TimeEnd")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("TimeStart")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("AvailableAppointments");
                });

            modelBuilder.Entity("MedicalServices.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Age")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("ChangeCount")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Day")
                        .HasColumnType("date");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("ForHimSelf")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("ProblemDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time");

                    b.Property<string>("patientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("MedicalServices.Models.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<string>("ReceiverType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SendTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<string>("SenderType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("MedicalServices.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Focus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SpecializationId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Heart St",
                            Experience = "10 years",
                            Gender = 0,
                            Price = 0f,
                            SpecializationId = 1
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Pulse Ave",
                            Experience = "8 years",
                            Gender = 1,
                            Price = 0f,
                            SpecializationId = 1
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Artery Blvd",
                            Experience = "12 years",
                            Gender = 0,
                            Price = 0f,
                            SpecializationId = 1
                        },
                        new
                        {
                            Id = 4,
                            Address = "321 Skin Lane",
                            Experience = "7 years",
                            Gender = 1,
                            Price = 0f,
                            SpecializationId = 2
                        },
                        new
                        {
                            Id = 5,
                            Address = "654 Acne Dr",
                            Experience = "6 years",
                            Gender = 0,
                            Price = 0f,
                            SpecializationId = 2
                        },
                        new
                        {
                            Id = 6,
                            Address = "987 Derma Ct",
                            Experience = "9 years",
                            Gender = 1,
                            Price = 0f,
                            SpecializationId = 2
                        },
                        new
                        {
                            Id = 7,
                            Address = "123 Brain Ave",
                            Experience = "15 years",
                            Gender = 0,
                            Price = 0f,
                            SpecializationId = 3
                        },
                        new
                        {
                            Id = 8,
                            Address = "456 Neuron Blvd",
                            Experience = "11 years",
                            Gender = 1,
                            Price = 0f,
                            SpecializationId = 3
                        },
                        new
                        {
                            Id = 9,
                            Address = "789 Spine Dr",
                            Experience = "13 years",
                            Gender = 0,
                            Price = 0f,
                            SpecializationId = 3
                        },
                        new
                        {
                            Id = 10,
                            Address = "321 Bone St",
                            Experience = "14 years",
                            Gender = 0,
                            Price = 0f,
                            SpecializationId = 4
                        },
                        new
                        {
                            Id = 11,
                            Address = "654 Joint Ave",
                            Experience = "8 years",
                            Gender = 1,
                            Price = 0f,
                            SpecializationId = 4
                        },
                        new
                        {
                            Id = 12,
                            Address = "987 Fracture Rd",
                            Experience = "10 years",
                            Gender = 0,
                            Price = 0f,
                            SpecializationId = 4
                        },
                        new
                        {
                            Id = 13,
                            Address = "123 Kids Ln",
                            Experience = "5 years",
                            Gender = 1,
                            Price = 0f,
                            SpecializationId = 5
                        },
                        new
                        {
                            Id = 14,
                            Address = "456 Baby Blvd",
                            Experience = "6 years",
                            Gender = 0,
                            Price = 0f,
                            SpecializationId = 5
                        },
                        new
                        {
                            Id = 15,
                            Address = "789 Child Ct",
                            Experience = "8 years",
                            Gender = 1,
                            Price = 0f,
                            SpecializationId = 5
                        },
                        new
                        {
                            Id = 16,
                            Address = "321 Cancer St",
                            Experience = "12 years",
                            Gender = 0,
                            Price = 0f,
                            SpecializationId = 6
                        },
                        new
                        {
                            Id = 17,
                            Address = "654 Tumor Blvd",
                            Experience = "10 years",
                            Gender = 1,
                            Price = 0f,
                            SpecializationId = 6
                        },
                        new
                        {
                            Id = 18,
                            Address = "987 Chemo Rd",
                            Experience = "11 years",
                            Gender = 0,
                            Price = 0f,
                            SpecializationId = 6
                        },
                        new
                        {
                            Id = 19,
                            Address = "123 Mind St",
                            Experience = "9 years",
                            Gender = 1,
                            Price = 0f,
                            SpecializationId = 7
                        },
                        new
                        {
                            Id = 20,
                            Address = "456 Emotion Ave",
                            Experience = "8 years",
                            Gender = 0,
                            Price = 0f,
                            SpecializationId = 7
                        },
                        new
                        {
                            Id = 21,
                            Address = "789 Therapy Ct",
                            Experience = "7 years",
                            Gender = 1,
                            Price = 0f,
                            SpecializationId = 7
                        },
                        new
                        {
                            Id = 22,
                            Address = "321 Xray Ln",
                            Experience = "13 years",
                            Gender = 0,
                            Price = 0f,
                            SpecializationId = 8
                        },
                        new
                        {
                            Id = 23,
                            Address = "654 MRI Blvd",
                            Experience = "12 years",
                            Gender = 1,
                            Price = 0f,
                            SpecializationId = 8
                        },
                        new
                        {
                            Id = 24,
                            Address = "987 CT Scan Rd",
                            Experience = "14 years",
                            Gender = 0,
                            Price = 0f,
                            SpecializationId = 8
                        });
                });

            modelBuilder.Entity("MedicalServices.Models.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("MedicalServices.Models.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "92fee894-f6b2-4053-a6ec-9bb90320fa93",
                            Email = "john.smith@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. John Smith",
                            Password = "hashed_password_123",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.john.smith"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fc26e8b4-bdc0-4728-818b-70e9aed1959f",
                            Email = "sarah.johnson@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Sarah Johnson",
                            Password = "hashed_password_456",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.sarah.johnson"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a2840403-506e-4d3d-9aa5-d59f8ee3a74f",
                            Email = "ahmed.ali@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Ahmed Ali",
                            Password = "hashed_password_789",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.ahmed.ali"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "25cb7e46-393b-4da7-ae01-971cf2726cfb",
                            Email = "emily.brown@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Emily Brown",
                            Password = "hashed_password_101",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.emily.brown"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ca762fc0-7582-4d19-8dc9-79284ebae053",
                            Email = "william.davis@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. William Davis",
                            Password = "hashed_password_102",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.william.davis"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cdb0455b-4954-4827-8c84-1213e9381139",
                            Email = "fatima.hassan@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Fatima Hassan",
                            Password = "hashed_password_103",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.fatima.hassan"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d27ed3e2-2cfa-4f83-b9b4-2a94900116a2",
                            Email = "jacob.wilson@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Jacob Wilson",
                            Password = "hashed_password_104",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.jacob.wilson"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "80dcb8dd-0a01-4aff-925a-6ab7d5a2ef08",
                            Email = "sophia.martinez@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Sophia Martinez",
                            Password = "hashed_password_105",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.sophia.martinez"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "29191425-3bf8-4376-a877-9ba97ea709a4",
                            Email = "ethan.thompson@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Ethan Thompson",
                            Password = "hashed_password_106",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.ethan.thompson"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f880f955-89c7-4d99-800d-29982bc1dfb1",
                            Email = "ava.garcia@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Ava Garcia",
                            Password = "hashed_password_107",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.ava.garcia"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "68d05a2c-3f3b-41f1-95fe-6d14b7cc24b6",
                            Email = "michael.lee@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Michael Lee",
                            Password = "hashed_password_108",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.michael.lee"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5e6a6ce8-923c-450d-b154-0bd2db16f594",
                            Email = "olivia.rodriguez@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Olivia Rodriguez",
                            Password = "hashed_password_109",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.olivia.rodriguez"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "71917ae3-a521-4252-b2d5-ee70f01a8a0e",
                            Email = "benjamin.white@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Benjamin White",
                            Password = "hashed_password_110",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.benjamin.white"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "36576187-2a83-4e65-9c7b-00ea25448829",
                            Email = "isabella.hall@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Isabella Hall",
                            Password = "hashed_password_111",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.isabella.hall"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "57a37d84-b797-4ac9-ad40-b88bfac9c00c",
                            Email = "daniel.young@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Daniel Young",
                            Password = "hashed_password_112",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.daniel.young"
                        },
                        new
                        {
                            Id = 16,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "73b47259-c113-483f-9add-8ff4bb434c48",
                            Email = "mia.king@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Mia King",
                            Password = "hashed_password_113",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.mia.king"
                        },
                        new
                        {
                            Id = 17,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a0caba47-e4a2-48aa-a865-e4e871190671",
                            Email = "james.wright@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. James Wright",
                            Password = "hashed_password_114",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.james.wright"
                        },
                        new
                        {
                            Id = 18,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dab283a5-8228-4ffd-9a66-5e512a1bfb60",
                            Email = "amelia.scott@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Amelia Scott",
                            Password = "hashed_password_115",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.amelia.scott"
                        },
                        new
                        {
                            Id = 19,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c9e1dc3f-78df-483a-9966-5543c8682361",
                            Email = "lucas.green@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Lucas Green",
                            Password = "hashed_password_116",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.lucas.green"
                        },
                        new
                        {
                            Id = 20,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a6c65caf-7a24-4a16-a613-adb03e8e3dad",
                            Email = "charlotte.adams@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Charlotte Adams",
                            Password = "hashed_password_117",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.charlotte.adams"
                        },
                        new
                        {
                            Id = 21,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d673c948-7551-4b6b-b835-f23a16599a10",
                            Email = "henry.baker@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Henry Baker",
                            Password = "hashed_password_118",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.henry.baker"
                        },
                        new
                        {
                            Id = 22,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6cb53156-4551-412b-a5f1-8c5398b13ab4",
                            Email = "grace.nelson@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Grace Nelson",
                            Password = "hashed_password_119",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.grace.nelson"
                        },
                        new
                        {
                            Id = 23,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cec0d785-5bce-4afd-810e-2de3758eeaef",
                            Email = "elijah.carter@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Elijah Carter",
                            Password = "hashed_password_120",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.elijah.carter"
                        },
                        new
                        {
                            Id = 24,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "963c26a8-5f45-470c-bcfd-db0344ded5c2",
                            Email = "lily.mitchell@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dr. Lily Mitchell",
                            Password = "hashed_password_121",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            TwoFactorEnabled = false,
                            UserName = "dr.lily.mitchell"
                        });
                });

            modelBuilder.Entity("MedicalServices.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("MedicalServices.Models.MedicalRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Treatment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("MedicalServices.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<string>("ReceiverType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<string>("SenderType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("MedicalServices.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("patientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("MedicalServices.Models.PatientFavoriteDoctors", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("PatientId", "DoctorId");

                    b.HasIndex("DoctorId");

                    b.ToTable("PatientFavoriteDoctors");
                });

            modelBuilder.Entity("MedicalServices.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("MedicalServices.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("MedicalServices.Models.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cardiology"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Dermatology"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Neurology"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Orthopedics"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Pediatrics"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Oncology"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Psychiatry"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Radiology"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MedicalServices.Models.AvailableAppointments", b =>
                {
                    b.HasOne("MedicalServices.Models.Doctor", "Doctor")
                        .WithMany("AvailableAppointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("MedicalServices.Models.Booking", b =>
                {
                    b.HasOne("MedicalServices.Models.AvailableAppointments", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalServices.Models.Doctor", "Doctor")
                        .WithMany("Bookings")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicalServices.Models.Patient", "Patient")
                        .WithMany("Bookings")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalServices.Models.Doctor", b =>
                {
                    b.HasOne("MedicalServices.Models.Identity.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("MedicalServices.Models.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalServices.Models.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalServices.Models.MedicalRecord", b =>
                {
                    b.HasOne("MedicalServices.Models.Booking", "Booking")
                        .WithOne("MedicalRecord")
                        .HasForeignKey("MedicalServices.Models.MedicalRecord", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("MedicalServices.Models.Notification", b =>
                {
                    b.HasOne("MedicalServices.Models.Identity.User", null)
                        .WithMany("Notifications")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MedicalServices.Models.Patient", b =>
                {
                    b.HasOne("MedicalServices.Models.Identity.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("MedicalServices.Models.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalServices.Models.PatientFavoriteDoctors", b =>
                {
                    b.HasOne("MedicalServices.Models.Doctor", "Doctor")
                        .WithMany("PatientFavoriteDoctors")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalServices.Models.Patient", "patient")
                        .WithMany("PatientFavoriteDoctors")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("patient");
                });

            modelBuilder.Entity("MedicalServices.Models.Payment", b =>
                {
                    b.HasOne("MedicalServices.Models.Booking", "Booking")
                        .WithOne("Payment")
                        .HasForeignKey("MedicalServices.Models.Payment", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("MedicalServices.Models.Review", b =>
                {
                    b.HasOne("MedicalServices.Models.Doctor", "Doctor")
                        .WithMany("Reviews")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalServices.Models.Patient", "Patient")
                        .WithMany("Reviews")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("MedicalServices.Models.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("MedicalServices.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("MedicalServices.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("MedicalServices.Models.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalServices.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("MedicalServices.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicalServices.Models.Booking", b =>
                {
                    b.Navigation("MedicalRecord")
                        .IsRequired();

                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("MedicalServices.Models.Doctor", b =>
                {
                    b.Navigation("AvailableAppointments");

                    b.Navigation("Bookings");

                    b.Navigation("PatientFavoriteDoctors");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("MedicalServices.Models.Identity.User", b =>
                {
                    b.Navigation("Doctor")
                        .IsRequired();

                    b.Navigation("Notifications");

                    b.Navigation("Patient")
                        .IsRequired();
                });

            modelBuilder.Entity("MedicalServices.Models.Patient", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("PatientFavoriteDoctors");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("MedicalServices.Models.Specialization", b =>
                {
                    b.Navigation("Doctors");
                });
#pragma warning restore 612, 618
        }
    }
}
